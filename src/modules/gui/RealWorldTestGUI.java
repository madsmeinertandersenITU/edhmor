/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modules.gui;

import apriltag.ImageResolution;
import apriltag.TagUtils;
import coppelia.IntW;
import coppelia.remoteApi;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import modules.ModuleSetFactory;
import modules.evaluation.CoppeliaSimCreateRobotWId;
import modules.evaluation.CoppeliaSimulator;
import modules.util.ChromoConversion;
import modules.util.SimulationConfiguration;
import org.opencv.core.Core;
import dynamixel.DynamixelSinusoidalController;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import modules.control.SinusoidalController;
import modules.evaluation.HardwareEvaluator;
import modules.evaluation.CoppeliaSimCreateRobot;
import modules.evaluation.CoppeliaSimEvaluator;
import modules.util.PhysicalSetupConfiguration;
import org.visp.core.VpCameraParameters;

/**
 *
 * @author anfv
 */
public class RealWorldTestGUI extends javax.swing.JFrame {

    //Load Visp and openCV libraries
    static {
        System.loadLibrary("visp_java341");
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    private String chromosome;
    private boolean assembleRobot = false;
    private CoppeliaSimCreateRobot robot;
    CoppeliaSimulator coppeliaSimulator;
    remoteApi coppeliaSimApi;
    int clientID;
    DynamixelSinusoidalController dynamixelController;
    SinusoidalController coppeliaController;
    private boolean robotFromExperiment = false;
    /**
     * Creates new form NewJFrame
     */
    public RealWorldTestGUI() {
        initComponents();
        coppeliaSimulator = new CoppeliaSimulator();
        System.out.println("connecting to coppeliaSim...");
        coppeliaSimulator.connect2CoppeliaSim();

        coppeliaSimApi = coppeliaSimulator.getCoppeliaSimApi();
        clientID = coppeliaSimulator.getClientID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        timeSlider1 = new javax.swing.JSlider();
        chromoTextField = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        demoButton1 = new javax.swing.JButton();
        demoButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        assCamTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fitnessCamTextField = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        assembleButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        moveInitPosButton = new javax.swing.JButton();
        moveToTimeToggleButton = new javax.swing.JToggleButton();
        speedSlider = new javax.swing.JSlider();
        speedLabel = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        evaluateButton = new javax.swing.JButton();
        emergencyStopButton = new javax.swing.JButton();
        timeSlider = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        expButton = new javax.swing.JButton();
        expNumberTextField1 = new javax.swing.JTextField();
        expPathTextField1 = new javax.swing.JTextField();
        viewRobotButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        assWIdsButton3 = new javax.swing.JButton();
        moveTo0Button = new javax.swing.JButton();

        jButton1.setText("Delete");

        jButton4.setText("demo2");

        timeSlider1.setValue(0);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        chromoTextField.setText("Chromosome to evaluate");
        chromoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromoTextFieldActionPerformed(evt);
            }
        });
        chromoTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chromoTextFieldKeyTyped(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deleteButtonMouseReleased(evt);
            }
        });
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        demoButton1.setText("demo1");
        demoButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                demoButton1MouseReleased(evt);
            }
        });

        demoButton2.setText("demo2");
        demoButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                demoButton2MouseReleased(evt);
            }
        });

        jLabel1.setText("Dynamixel Serial port: ");

        jTextField3.setText("COM3");

        jLabel2.setText("Camera for assembly:");

        assCamTextField.setText("2");

        jLabel3.setText("Camera for fitness:");

        fitnessCamTextField.setText("2");
        fitnessCamTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitnessCamTextFieldActionPerformed(evt);
            }
        });

        assembleButton.setText("Assemble Robot");
        assembleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                assembleButtonMouseReleased(evt);
            }
        });
        assembleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assembleButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("module IDs:");

        moveInitPosButton.setText("Move to Init Pos");
        moveInitPosButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                moveInitPosButtonMouseReleased(evt);
            }
        });
        moveInitPosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveInitPosButtonActionPerformed(evt);
            }
        });

        moveToTimeToggleButton.setText("Move to time");
        moveToTimeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToTimeToggleButtonActionPerformed(evt);
            }
        });

        speedSlider.setMaximum(60);
        speedSlider.setValue(25);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        speedLabel.setText("25rpm");

        evaluateButton.setText("Evaluate");
        evaluateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                evaluateButtonMouseReleased(evt);
            }
        });
        evaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateButtonActionPerformed(evt);
            }
        });

        emergencyStopButton.setText("Emergency Stop");
        emergencyStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emergencyStopButtonActionPerformed(evt);
            }
        });

        timeSlider.setMaximum(63);
        timeSlider.setValue(0);
        timeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeSliderStateChanged(evt);
            }
        });

        jLabel6.setText("Speed:");

        timeLabel.setText("0s");

        jLabel8.setText("Time:");

        expButton.setText("experiment");
        expButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expButtonActionPerformed(evt);
            }
        });

        expNumberTextField1.setText("3");
        expNumberTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expNumberTextField1ActionPerformed(evt);
            }
        });

        expPathTextField1.setText("C:\\fai\\documents\\papers\\2021_Frontiers_emerge\\HPCResults");

        viewRobotButton.setText("View Robot");
        viewRobotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRobotButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Run Robot");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        assWIdsButton3.setText("Assemble with IDs");
        assWIdsButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assWIdsButton3ActionPerformed(evt);
            }
        });

        moveTo0Button.setText("Move To 0 degrees");
        moveTo0Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTo0ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(demoButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(demoButton2)
                                        .addGap(55, 55, 55)
                                        .addComponent(expButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(assCamTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fitnessCamTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(expPathTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(expNumberTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assembleButton)
                                .addGap(19, 19, 19)
                                .addComponent(assWIdsButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(viewRobotButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(evaluateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(emergencyStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chromoTextField)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(moveToTimeToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moveInitPosButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(timeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(speedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(speedLabel)
                                .addGap(71, 71, 71)
                                .addComponent(moveTo0Button)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chromoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(demoButton1)
                            .addComponent(demoButton2)
                            .addComponent(expButton)
                            .addComponent(expNumberTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(expPathTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(assCamTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(fitnessCamTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(assembleButton)
                                .addComponent(assWIdsButton3)
                                .addComponent(jLabel4))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(viewRobotButton)
                                .addComponent(jButton2)
                                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(speedLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(moveInitPosButton)
                                            .addComponent(jLabel6)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(moveTo0Button)))))))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(moveToTimeToggleButton)
                        .addComponent(jLabel8))
                    .addComponent(timeLabel))
                .addGap(8, 8, 8)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(evaluateButton)
                    .addComponent(emergencyStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chromoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chromoTextFieldActionPerformed
        chromosome = ((JTextField) evt.getSource()).getText();
    }//GEN-LAST:event_chromoTextFieldActionPerformed

    private void fitnessCamTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitnessCamTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fitnessCamTextFieldActionPerformed

    private void assembleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assembleButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assembleButtonActionPerformed

    private void moveInitPosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveInitPosButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveInitPosButtonActionPerformed

    private void deleteButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseReleased
        chromoTextField.setText("");
        this.chromosome = "";
        robotFromExperiment = false;
    }//GEN-LAST:event_deleteButtonMouseReleased

    private void demoButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_demoButton1MouseReleased
        this.chromosome = "0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, "
                + "          4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "
                + "          0.0, 1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "
                + "          1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "
                + "          0.5455963591611365, 0.11371233636543576, 0.036290954196614544, 0.3903656017030154, 0.00679176572264828, 0.08146566559447732, 0.07535369694622207, 0.7730905441161025, 0.2500507281219915, 0.40313639025411774, 0.003973608347822122, 0.7781750911928096, 0.3899374167547881, 0.9600134640670561, 0.7250404836902793, 0.8445273695804674, 0.6467894800807368, 0.16030850687424925, 0.2018541954218076, 0.49567921698965856, 0.9019485291134028, 0.20829306079896515, 0.06612457688359719, 0.49610490207718816, 0.7488436794002526, 0.9645264481423355, 0.5163520317251132, 0.2457172378705993, 0.41377103759169165, 0.12842989434914487, 0.35238585296706193, 0.22133798867604992, 344.4679226211596, 309.281008589332, 266.8072439685561, 134.9338321211479, 12.159645687248428, 57.23409787318109, 232.8997112761175, 90.64154969188141, 121.74772800789312, 252.27177708222214, 66.17009812495084, 11.886793305793866, 11.792446546844415, 205.59952213863193, 79.29145620359417, 30.7604219708471, 0.4378857762257965, -0.4539603364820609, -0.018494123142167918, 0.49687190619165233, -0.43881005244237103, 0.39648466172584684, -0.304664078161781, -0.4413269361659312, 0.2201318672469349, -0.39377771322649235, -0.3754566640525431, -0.3969155009689903, 0.017185949030072756, -0.21401444995093033, 0.1949855550960401, -0.3794066650961495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0";

        chromoTextField.setText(this.chromosome);
        robotFromExperiment = false;
    }//GEN-LAST:event_demoButton1MouseReleased

    private void assembleButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assembleButtonMouseReleased
        //Set the correct module set to employ
        String moduleSet = "Emerge18AndFlatBaseModules";
        SimulationConfiguration.setModuleSet(moduleSet);
        ModuleSetFactory.reloadModuleSet();

        List<String> worldBase = new ArrayList<>();
        worldBase.add("baseEstandar" + ".world");
        SimulationConfiguration.setWorldsBase(worldBase);

        double[] chromosomeDouble = ChromoConversion.str2double(chromosome);
        /* Create and display the form */
        int cameraIndex = Integer.valueOf(assCamTextField.getText());
        System.out.println("Camera for assembly: " + cameraIndex);
        int baseTag = TagUtils.getBASE_TAG(); //Base mod    qule tag number
        
        robot = new CoppeliaSimCreateRobotWId(coppeliaSimulator, chromosomeDouble, "",
                false, false, baseTag, cameraIndex, 
                PhysicalSetupConfiguration.getArenaCeilingIntrinsicVispCamParam(), 
                PhysicalSetupConfiguration.getArenaCeilingCamResolution());
        Thread thread = new Thread((CoppeliaSimCreateRobotWId) robot);
        thread.start();


    }//GEN-LAST:event_assembleButtonMouseReleased

    private void demoButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_demoButton2MouseReleased
        this.chromosome = "0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "
                + "          1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "
                + "          1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "
                + "          1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "
                + "          0.5, 0.1, 0.036290954196614544, 0.3903656017030154, 0.00679176572264828, 0.08146566559447732, 0.07535369694622207, 0.7730905441161025, 0.2500507281219915, 0.40313639025411774, 0.003973608347822122, 0.7781750911928096, 0.3899374167547881, 0.9600134640670561, 0.7250404836902793, 0.8445273695804674, 0.6467894800807368, 0.16030850687424925, 0.2018541954218076, 0.49567921698965856, 0.9019485291134028, 0.20829306079896515, 0.06612457688359719, 0.49610490207718816, 0.7488436794002526, 0.9645264481423355, 0.5163520317251132, 0.2457172378705993, 0.41377103759169165, 0.12842989434914487, 0.35238585296706193, 0.22133798867604992, 344.4679226211596, 309.281008589332, 266.8072439685561, 134.9338321211479, 12.159645687248428, 57.23409787318109, 232.8997112761175, 90.64154969188141, 121.74772800789312, 252.27177708222214, 66.17009812495084, 11.886793305793866, 11.792446546844415, 205.59952213863193, 79.29145620359417, 30.7604219708471, 0.4378857762257965, -0.4539603364820609, -0.018494123142167918, 0.49687190619165233, -0.43881005244237103, 0.39648466172584684, -0.304664078161781, -0.4413269361659312, 0.2201318672469349, -0.39377771322649235, -0.3754566640525431, -0.3969155009689903, 0.017185949030072756, -0.21401444995093033, 0.1949855550960401, -0.3794066650961495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0";

        chromoTextField.setText(this.chromosome);
        robotFromExperiment = false;
    }//GEN-LAST:event_demoButton2MouseReleased

    private byte[] prepareRobotAndSimulator() {
        if (robot != null && robot instanceof CoppeliaSimCreateRobotWId) {
            CoppeliaSimCreateRobotWId robotWIDs = (CoppeliaSimCreateRobotWId) robot;
            int[] moduleId = robotWIDs.getModuleTags();
            if (moduleId != null) {
                String s = "";
                for (int i = 0; i < moduleId.length; i++) {
                    s += moduleId[i] + " ";
                }
                idTextField.setText(s);
                System.out.println("Module IDs: " + s);
            }
        }

        String ids = idTextField.getText();
        if (ids.isBlank()) {
            System.out.println("There are no module ids to control the robot. Aborting");
            return null;
        }
        ids = ids.replace("_", " ");
        ids = ids.replace(",", "");
        String[] idsArray = ids.split(" ");
        byte[] byteModuleId = new byte[idsArray.length];
        for (int i = 0; i < idsArray.length; i++) {
            byteModuleId[i] = Byte.valueOf(idsArray[i]);
        }

        if (robot == null) {
            double[] chromosomeDouble = ChromoConversion.str2double(chromosome);
            robot = new CoppeliaSimCreateRobot(coppeliaSimApi, clientID, chromosomeDouble, "", false, false);
        }
        return byteModuleId;
    }
    private void moveInitPosButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveInitPosButtonMouseReleased
        byte[] byteModuleId = prepareRobotAndSimulator();
        if (byteModuleId != null) {
            if (dynamixelController != null) {
                dynamixelController.close();
            }
            dynamixelController = new DynamixelSinusoidalController(robot);
            dynamixelController.setModuleId(byteModuleId);
            dynamixelController.setMovingSpeed(speedSlider.getValue());
            dynamixelController.enableTorque(true);
            dynamixelController.goToInitPos();
            timeSlider.setValue(0);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(RealWorldTestGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_moveInitPosButtonMouseReleased

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        speedLabel.setText(speedSlider.getValue() + " rpm");
        if (moveToTimeToggleButton.isSelected()) {
            dynamixelController.setMovingSpeed(speedSlider.getValue());
        }
    }//GEN-LAST:event_speedSliderStateChanged

    private void timeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeSliderStateChanged
        timeLabel.setText(timeSlider.getValue() / 10.0 + " s");
        double time = timeSlider.getValue() / 10.0; //10 seconds maximum
        if (dynamixelController != null && moveToTimeToggleButton.isSelected()) {
            dynamixelController.goToPos(time);
//            try {
//                Thread.sleep(50);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(RealWorldTestGUI.class.getName()).log(Level.SEVERE, null, ex);
//            }
            coppeliaController.updateJoints(time);
        }

    }//GEN-LAST:event_timeSliderStateChanged

    private void moveToTimeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToTimeToggleButtonActionPerformed
        if (moveToTimeToggleButton.isSelected()) {
            byte[] byteModuleId = prepareRobotAndSimulator();
            if (byteModuleId != null) {
                //If it is open, close it
                if (dynamixelController != null) {
                    dynamixelController.close();
                }
                dynamixelController = new DynamixelSinusoidalController(robot);
                dynamixelController.setModuleId(byteModuleId);
                dynamixelController.setMovingSpeed(speedSlider.getValue());
                dynamixelController.enableTorque(true);
                double time = timeSlider.getValue() / 10; //10 seconds maximum
                dynamixelController.goToPos(time);

                double[] chromosomeDouble = ChromoConversion.str2double(chromosome);
                robot = new CoppeliaSimCreateRobot(coppeliaSimApi, clientID, chromosomeDouble, "", false, false);
                robot.createRobot();

                //TODO: Assemble the robot with Apriltags
                /*
                double[] chromosomeDouble = ChromoConversion.str2double(chromosome);
                robot = new CoppeliaSimCreateRobotWId(coppeliaSimApi, clientID, chromosomeDouble, "", false, false);
                CoppeliaSimCreateRobotWId robotWIds = (CoppeliaSimCreateRobotWId) robot;
                int[] intModuleId = new int[byteModuleId.length];
                for (int i = 0; i < byteModuleId.length; i++) {
                    intModuleId[i] = Integer.valueOf(byteModuleId[i]);
                }
                robotWIds.setModuleTags(intModuleId);
                robotWIds.createRobotInteractively(intModuleId);
                 */
                coppeliaController = new SinusoidalController(coppeliaSimApi, clientID, robot);
                coppeliaSimApi.simxStartSimulation(clientID, remoteApi.simx_opmode_oneshot_wait);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(RealWorldTestGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else {
            closeConnections();
        }
    }//GEN-LAST:event_moveToTimeToggleButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeConnections();
    }//GEN-LAST:event_formWindowClosing

    private void evaluateButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_evaluateButtonMouseReleased
        byte[] byteModuleId = prepareRobotAndSimulator();
        if (byteModuleId != null) {
            //If it is open, close it
            if (dynamixelController != null) {
                dynamixelController.close();
            }
            dynamixelController = new DynamixelSinusoidalController(robot);
            dynamixelController.setModuleId(byteModuleId);
            //To smooth the 
            //dynamixelController.setMaxMovingSpeed();
            dynamixelController.setMovingSpeed(speedSlider.getValue());
            dynamixelController.enableTorque(true);
            int fitCamIndex = Integer.valueOf(this.fitnessCamTextField.getText());

            String folder = "C:/fai/fai_temp";
            if (robotFromExperiment) {
                String path = this.expPathTextField1.getText();
                path = path.replace("\\", "/");
                if (!path.endsWith("/"));
                path = path.concat("/");
                folder = path + "log" + this.expNumberTextField1.getText() + "/";
            }
            
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(RealWorldTestGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            HardwareEvaluator hwEvaluator = new HardwareEvaluator(dynamixelController, fitCamIndex, 
                    PhysicalSetupConfiguration.getArenaCeilingIntrinsicVispCamParam(), 
                    PhysicalSetupConfiguration.getArenaCeilingCamResolution(), 
                    folder);
            Thread thread = new Thread(hwEvaluator);
            thread.start();
        }
    }//GEN-LAST:event_evaluateButtonMouseReleased

    private void emergencyStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emergencyStopButtonActionPerformed
        if (dynamixelController != null) {
            dynamixelController.setEmergencyStop(true);
        }
    }//GEN-LAST:event_emergencyStopButtonActionPerformed

    private void expNumberTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expNumberTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expNumberTextField1ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void expButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expButtonActionPerformed
        robotFromExperiment = true;
        String path = this.expPathTextField1.getText();
        path = path.replace("\\", "/");
        if (!path.endsWith("/"));
        path = path.concat("/");
        String fileName = path + "log" + this.expNumberTextField1.getText() + "/best.txt";

        BufferedReader input;
        String last = "", line;
        try {
            input = new BufferedReader(new FileReader(fileName));
            while ((line = input.readLine()) != null) {
                if (!line.isBlank()) {
                    last = line;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RealWorldTestGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RealWorldTestGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        String genes = last.substring(3, last.indexOf("]"));
        System.out.println("GENES: " + genes);

        this.chromosome = genes;
        chromoTextField.setText(this.chromosome);
    }//GEN-LAST:event_expButtonActionPerformed

    private void viewRobotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRobotButtonActionPerformed
        String moduleSet = "Emerge18AndFlatBaseModules";
        SimulationConfiguration.setModuleSet(moduleSet);
        ModuleSetFactory.reloadModuleSet();

        List<String> worldBase = new ArrayList<>();
        worldBase.add("baseEstandar" + ".world");
        SimulationConfiguration.setWorldsBase(worldBase);

        double[] chromosomeDouble = ChromoConversion.str2double(chromosome);

        robot = new CoppeliaSimCreateRobot(coppeliaSimulator.getCoppeliaSimApi(), clientID, chromosomeDouble, "", true, false);
        robot.createRobot();
    }//GEN-LAST:event_viewRobotButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String moduleSet = "Emerge18AndFlatBaseModules";
        SimulationConfiguration.setModuleSet(moduleSet);
        ModuleSetFactory.reloadModuleSet();

        List<String> worldBase = new ArrayList<>();
        worldBase.add("baseEstandar" + ".world");
        SimulationConfiguration.setWorldsBase(worldBase);

        double[] chromosomeDouble = ChromoConversion.str2double(chromosome);

        robot = new CoppeliaSimCreateRobot(coppeliaSimulator.getCoppeliaSimApi(), clientID, chromosomeDouble, "", false, false);
        robot.createRobot();
        CoppeliaSimEvaluator evaluator = new CoppeliaSimEvaluator(chromosomeDouble, "default.ttm", true);
        evaluator.setMaxSimulationTime(8);
        double fitness = evaluator.evaluate();
        System.out.println("Fitness: " + fitness);    }//GEN-LAST:event_jButton2ActionPerformed

    private void assWIdsButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assWIdsButton3ActionPerformed
        //Set the correct module set to employ
        String moduleSet = "Emerge18AndFlatBaseModules";
        SimulationConfiguration.setModuleSet(moduleSet);
        ModuleSetFactory.reloadModuleSet();

        List<String> worldBase = new ArrayList<>();
        worldBase.add("baseEstandar" + ".world");
        SimulationConfiguration.setWorldsBase(worldBase);

        double[] chromosomeDouble = ChromoConversion.str2double(chromosome);
        /* Create and display the form */
        int cameraIndex = Integer.valueOf(assCamTextField.getText());
        System.out.println("Camera for assembly: " + cameraIndex);
        int baseTag = TagUtils.getBASE_TAG(); //Base mod    qule tag number

        robot = new CoppeliaSimCreateRobotWId(coppeliaSimulator, chromosomeDouble, "", false, false, baseTag, cameraIndex, 
                PhysicalSetupConfiguration.getArenaCeilingIntrinsicVispCamParam(), 
                PhysicalSetupConfiguration.getArenaCeilingCamResolution());
        CoppeliaSimCreateRobotWId robotWIds = (CoppeliaSimCreateRobotWId) robot;
        String ids = idTextField.getText();
        if (ids.isBlank()) {
            System.out.println("There are no module ids to control the robot. Aborting");
            return;
        }
        ids = ids.replace(",", "");
        ids = ids.replace("_", "");
        String[] idsArray = ids.split(" ");
        int[] intModuleId = new int[idsArray.length];
        for (int i = 0; i < idsArray.length; i++) {
            intModuleId[i] = Byte.valueOf(idsArray[i]);
        }
        robotWIds.setModuleTagsTmp(intModuleId);
        Thread thread = new Thread((CoppeliaSimCreateRobotWId) robot);
        thread.start();    }//GEN-LAST:event_assWIdsButton3ActionPerformed

    private void moveTo0ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTo0ButtonActionPerformed
        byte[] byteModuleId = prepareRobotAndSimulator();
        if (byteModuleId != null) {
            if (dynamixelController != null) {
                dynamixelController.close();
            }
            dynamixelController = new DynamixelSinusoidalController(robot);
            dynamixelController.setModuleId(byteModuleId);
            dynamixelController.setMovingSpeed(speedSlider.getValue());
            dynamixelController.enableTorque(true);
            dynamixelController.moveTo0Degrees();
            timeSlider.setValue(0);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(RealWorldTestGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_moveTo0ButtonActionPerformed

    private void evaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_evaluateButtonActionPerformed

    private void chromoTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chromoTextFieldKeyTyped
        robotFromExperiment = false;
    }//GEN-LAST:event_chromoTextFieldKeyTyped

    private void closeConnections() {
        if (dynamixelController != null) {
            dynamixelController.close();
        }

        // stop the simulation:
        coppeliaSimApi.simxStopSimulation(clientID, remoteApi.simx_opmode_oneshot_wait);
        // Before closing the connection to V-REP, make sure that the last command sent out had time to arrive. You can guarantee this with (for example):
        IntW pingTime = new IntW(0);
        coppeliaSimApi.simxGetPingTime(clientID, pingTime);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RealWorldTestGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RealWorldTestGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RealWorldTestGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RealWorldTestGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                System.out.println("HOLA");
                new RealWorldTestGUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField assCamTextField;
    private javax.swing.JButton assWIdsButton3;
    private javax.swing.JButton assembleButton;
    private javax.swing.JTextField chromoTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton demoButton1;
    private javax.swing.JButton demoButton2;
    private javax.swing.JButton emergencyStopButton;
    private javax.swing.JButton evaluateButton;
    private javax.swing.JButton expButton;
    private javax.swing.JTextField expNumberTextField1;
    private javax.swing.JTextField expPathTextField1;
    private javax.swing.JTextField fitnessCamTextField;
    private javax.swing.JTextField idTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton moveInitPosButton;
    private javax.swing.JButton moveTo0Button;
    private javax.swing.JToggleButton moveToTimeToggleButton;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSlider timeSlider;
    private javax.swing.JSlider timeSlider1;
    private javax.swing.JButton viewRobotButton;
    // End of variables declaration//GEN-END:variables

}

/* 
 * EDHMOR - Evolutionary designer of heterogeneous modular robots
 * <https://bitbucket.org/afaina/edhmor>
 * Copyright (C) 2015 GII (UDC) and REAL (ITU)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package modules.test.operations;

import es.udc.gii.common.eaf.util.EAFRandom;
import modules.evaluation.CoppeliaSimEvaluator;
import modules.jeaf.operation.MutationOperation;
import modules.jeaf.operation.grow.AddStability;
import modules.individual.String2Tree;
import modules.individual.TreeIndividual;

/**
 *
 * @author fai
 */
public class TestAddStability {

    public static void main(String[] args) {

        EAFRandom.init();
        String str = "0.0, 3.0, 2.0, 3.0, 2.0, 1.0, 2.0, 2.0, 2.0, 1.0, 4.0, 2.0, 1.0, 4.0, 3.0, 2.0, 4.0, 1.0, 2.0, 0.0, 1.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 6.0, 10.0, 9.0, 9.0, 8.0, 6.0, 7.0, 4.0, 7.0, 6.0, 2.0, 9.0, 8.0, 4.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 4.0, 6.0, 1.0, 0.0, 6.0, 0.0, 3.0, 0.0, 0.0, 265.961814921315, 89.38027203722756, 227.9690299939729, 248.85129725244659, 222.40873494755303, 358.1037030835047, 96.2969783345662, 174.08993181873262, 94.81097266944397, 127.54578344039447, 306.40760610260594, 156.46689190288365, 73.13086820987155, 57.610695544397, 100.69757650516131, 0.0, 0.42849689188516304, 0.01323581080979519, -0.16002721440696532, -0.19386351309753203, -0.2599469634654836, 0.32088565183695195, 0.17179498991230135, -0.030065036258529076, 0.3610886606225254, 0.1855931348345201, -0.16552775053698687, -0.49772539541583116, 0.35389634668238157, 0.2588254008541553, -0.3800591198656573";
        //String str = "0.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 9.0, 1.0, 3.0, 7.0, 2.0, 1.0, 3.0, 2.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 219.48644159721468, 132.06968463318847, 145.3476877015458, 40.70013436265869, 43.90108301540267, 320.6988772131101, 39.76453931385788, 220.92786302669816, 320.39512055085953, 127.1112907231679, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12080451970074535, 0.3218304564451965, -0.3275111642535564, -0.38864605139208863, 0.16183885604105042, -0.12842882791493193, -0.1085188776133107, -0.4886381731405761, -0.1788486137187546, 0.1806220902835336, 0.0, 0.0, 0.0, 0.0, 0.0";
        //String str = "0.0, 3.0, 2.0, 3.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 3.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 6.0, 3.0, 4.0, 6.0, 4.0, 7.0, 2.0, 2.0, 8.0, 0.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 4.0, 1.0, 2.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.165813752847662, 172.83476442565316, 324.39299125180344, 281.83128463320355, 218.38142157575282, 63.709932811630445, 0.0, 72.61098398283956, 58.70460224515164, 83.20578889854465, 299.42948416355676, 219.18413457223028, 0.0, 0.0, 0.0, 0.0, 0.08462432810000975, -0.3860228686351731, -0.43051086097595925, -0.34428561343846376, -0.08777042451255979, -0.1577276990206401, 0.0, 0.2638734690690814, -0.38589982048080773, 0.23685048581978807, -0.4622784355681677, 0.08451951011392489, 0.0, 0.0, 0.0";
        //String str = "0.0, 1.0, 1.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 5.0, 5.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 3.0, 3.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 197.75628015817284, 336.9559251444789, 74.9206102628252, 197.81365615880006, 18.85740709768168, 232.557037542007, 263.5979697137435, 124.60880480748372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.22625184189365777, 0.11070011863015516, -0.21733794325296207, -0.3016253695459623, 0.18827762171128293, 0.41260283133326503, -0.03695386855719551, -0.21681100833863387, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0";
        //String str = "0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.24735028681324, 258.39017119851275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0";
        //String str = "0.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 2.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 31.830220182297808, 292.58161814199116, 43.9123942953938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0";
        //String str = "0.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 5.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 3.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 197.75628015817284, 336.9559251444789, 74.9206102628252, 197.81365615880006, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.22625184189365777, 0.11070011863015516, -0.21733794325296207, -0.3016253695459623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0";
        String2Tree str2Tree = new String2Tree(str);
        TreeIndividual arbol = str2Tree.toTree();


        double[] valuesIni = arbol.getChromosomes()[0].getElements();



        System.out.print("\nCromosoma (Objetive function): ");
        for (int ii = 0; ii < valuesIni.length; ii++) {
            System.out.print(valuesIni[ii] + ", ");
        }

        System.out.println("\n" + arbol.detailedToString());

        CoppeliaSimEvaluator evaluadorIni = new CoppeliaSimEvaluator(valuesIni);
        evaluadorIni.setGuiOn(true);
        double calidadIni = evaluadorIni.evaluate();
        System.out.println("Calidad = " + calidadIni);





        MutationOperation op = new AddStability();
        op.run(arbol);

        System.out.println("\n" + arbol.detailedToString());

        double[] values = arbol.getChromosomes()[0].getElements();

        System.out.print("\nCromosoma (Objetive function): ");
        for (int i = 0; i < values.length; i++) {
            System.out.print(values[i] + ", ");

        }
        CoppeliaSimEvaluator evaluador = new CoppeliaSimEvaluator(values);
        evaluador.setGuiOn(true);
        double calidad = evaluador.evaluate();
        System.out.println("Calidad = " + calidad);



    }


}
